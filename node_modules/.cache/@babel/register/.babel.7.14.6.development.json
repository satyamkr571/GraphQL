{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/satyam/Desktop/node_graphql/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/satyam/Desktop/node_graphql\",\"filename\":\"/Users/satyam/Desktop/node_graphql/src/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/satyam/Desktop/node_graphql\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.14.6": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/satyam/Desktop/node_graphql/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/satyam/Desktop/node_graphql",
      "filename": "/Users/satyam/Desktop/node_graphql/src/index.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/satyam/Desktop/node_graphql",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/satyam/Desktop/node_graphql/src/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/satyam/Desktop/node_graphql/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/satyam/Desktop/node_graphql/src/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "//const { ApolloServer, gql } = require('apollo-server');\nimport { ApolloServer, gql } from \"apollo-server\";\nconst books = [{\n  title: \"The Awakening\",\n  author: \"Kate Chopin\"\n}, {\n  title: \"City of Glass\",\n  author: \"Paul Auster\"\n}];\nconst typeDefs = gql``;\nconst resolvers = {\n  Query: {\n    books: () => books\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n}); // The `listen` method launches a web server.\n\nserver.listen().then(({\n  url\n}) => {\n  console.log(`ðŸš€  Server ready at ${url}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkFwb2xsb1NlcnZlciIsImdxbCIsImJvb2tzIiwidGl0bGUiLCJhdXRob3IiLCJ0eXBlRGVmcyIsInJlc29sdmVycyIsIlF1ZXJ5Iiwic2VydmVyIiwibGlzdGVuIiwidGhlbiIsInVybCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsU0FBU0EsWUFBVCxFQUF1QkMsR0FBdkIsUUFBa0MsZUFBbEM7QUFFQSxNQUFNQyxLQUFLLEdBQUcsQ0FDWjtBQUNFQyxFQUFBQSxLQUFLLEVBQUUsZUFEVDtBQUVFQyxFQUFBQSxNQUFNLEVBQUU7QUFGVixDQURZLEVBS1o7QUFDRUQsRUFBQUEsS0FBSyxFQUFFLGVBRFQ7QUFFRUMsRUFBQUEsTUFBTSxFQUFFO0FBRlYsQ0FMWSxDQUFkO0FBV0EsTUFBTUMsUUFBUSxHQUFHSixHQUFJLEVBQXJCO0FBRUEsTUFBTUssU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEwsSUFBQUEsS0FBSyxFQUFFLE1BQU1BO0FBRFI7QUFEUyxDQUFsQjtBQU1BLE1BQU1NLE1BQU0sR0FBRyxJQUFJUixZQUFKLENBQWlCO0FBQUVLLEVBQUFBLFFBQUY7QUFBWUMsRUFBQUE7QUFBWixDQUFqQixDQUFmLEMsQ0FFQTs7QUFDQUUsTUFBTSxDQUFDQyxNQUFQLEdBQWdCQyxJQUFoQixDQUFxQixDQUFDO0FBQUVDLEVBQUFBO0FBQUYsQ0FBRCxLQUFhO0FBQ2hDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSx1QkFBc0JGLEdBQUksRUFBdkM7QUFDRCxDQUZEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zYXR5YW0vRGVza3RvcC9ub2RlX2dyYXBocWwvc3JjLyIsInNvdXJjZXNDb250ZW50IjpbIi8vY29uc3QgeyBBcG9sbG9TZXJ2ZXIsIGdxbCB9ID0gcmVxdWlyZSgnYXBvbGxvLXNlcnZlcicpO1xuaW1wb3J0IHsgQXBvbGxvU2VydmVyLCBncWwgfSBmcm9tIFwiYXBvbGxvLXNlcnZlclwiO1xuXG5jb25zdCBib29rcyA9IFtcbiAge1xuICAgIHRpdGxlOiBcIlRoZSBBd2FrZW5pbmdcIixcbiAgICBhdXRob3I6IFwiS2F0ZSBDaG9waW5cIixcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBcIkNpdHkgb2YgR2xhc3NcIixcbiAgICBhdXRob3I6IFwiUGF1bCBBdXN0ZXJcIixcbiAgfSxcbl07XG5cbmNvbnN0IHR5cGVEZWZzID0gZ3FsYGA7XG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgUXVlcnk6IHtcbiAgICBib29rczogKCkgPT4gYm9va3MsXG4gIH0sXG59O1xuXG5jb25zdCBzZXJ2ZXIgPSBuZXcgQXBvbGxvU2VydmVyKHsgdHlwZURlZnMsIHJlc29sdmVycyB9KTtcblxuLy8gVGhlIGBsaXN0ZW5gIG1ldGhvZCBsYXVuY2hlcyBhIHdlYiBzZXJ2ZXIuXG5zZXJ2ZXIubGlzdGVuKCkudGhlbigoeyB1cmwgfSkgPT4ge1xuICBjb25zb2xlLmxvZyhg8J+agCAgU2VydmVyIHJlYWR5IGF0ICR7dXJsfWApO1xufSk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "ApolloServer",
        "gql",
        "books",
        "title",
        "author",
        "typeDefs",
        "resolvers",
        "Query",
        "server",
        "listen",
        "then",
        "url",
        "console",
        "log"
      ],
      "mappings": "AAAA;AACA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,eAAlC;AAEA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,eADT;AAEEC,EAAAA,MAAM,EAAE;AAFV,CADY,EAKZ;AACED,EAAAA,KAAK,EAAE,eADT;AAEEC,EAAAA,MAAM,EAAE;AAFV,CALY,CAAd;AAWA,MAAMC,QAAQ,GAAGJ,GAAI,EAArB;AAEA,MAAMK,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLL,IAAAA,KAAK,EAAE,MAAMA;AADR;AADS,CAAlB;AAMA,MAAMM,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAAEK,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAjB,CAAf,C,CAEA;;AACAE,MAAM,CAACC,MAAP,GAAgBC,IAAhB,CAAqB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBF,GAAI,EAAvC;AACD,CAFD",
      "sourceRoot": "/Users/satyam/Desktop/node_graphql/src/",
      "sourcesContent": [
        "//const { ApolloServer, gql } = require('apollo-server');\nimport { ApolloServer, gql } from \"apollo-server\";\n\nconst books = [\n  {\n    title: \"The Awakening\",\n    author: \"Kate Chopin\",\n  },\n  {\n    title: \"City of Glass\",\n    author: \"Paul Auster\",\n  },\n];\n\nconst typeDefs = gql``;\n\nconst resolvers = {\n  Query: {\n    books: () => books,\n  },\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\n// The `listen` method launches a web server.\nserver.listen().then(({ url }) => {\n  console.log(`ðŸš€  Server ready at ${url}`);\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1624412572242
  }
}